class Pair{
    int node;
    int weight;
    Pair(int node,int weight){
        this.node=node;
        this.weight=weight;
    }
}
class Solution {

    public int[] shortestPath(int v, int e, int[][] edges) {
        
        ArrayList<ArrayList<Pair>>adj=new ArrayList<>();
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<Pair>());
        }
        
        for(int i=0;i<e;i++){
            int u=edges[i][0];
            int vv=edges[i][1];
            int weight=edges[i][2];
            
            adj.get(u).add(new Pair(vv,weight));
        }
        
        int dis[]=new int [v];
        
        for(int i=0;i<v;i++){
            dis[i]=100000;
        }
        dis[0]=0;
        
        Queue<Pair>q=new LinkedList<>();
        
        q.add(new Pair(0,0));//{node,weight}
        
        while(!q.isEmpty()){
            int src=q.peek().node;
            int weight=q.peek().weight;
            
            q.poll();
            
            for(Pair p: adj.get(src)){
                int node=p.node;
                int wght=p.weight;
                
                if(dis[node]>dis[src]+wght){
                    dis[node]=dis[src]+wght;
                    q.add(new Pair(node,dis[node]));
                }
            }
        }
        
        for(int i=0;i<v;i++){
            if(dis[i]==100000){
                dis[i]=-1;
            }
        }
        
        return dis;
        
    }
}
