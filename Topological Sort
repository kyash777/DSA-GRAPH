class Solution {
    
    public static void dfs(int node,int vis[],ArrayList<ArrayList<Integer>>adj,Stack<Integer>st){
        vis[node]=1;
        
        for(int i: adj.get(node)){
            if(vis[i]==0){
                dfs(i,vis,adj,st);
            }
        }
        st.push(node);
    }
    public static ArrayList<Integer> topoSort(int v, int[][] edges) {
        
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<Integer>());
        }
        
        for(int i=0;i<edges.length;i++){
            
            int u=edges[i][0];
            int vv=edges[i][1];
            
            adj.get(u).add(vv);
            
        }
        
        int vis[]=new int [v];
        Stack<Integer>st=new Stack<>();
        
        for(int i=0;i<v;i++){
            if(vis[i]==0){
                dfs(i,vis,adj,st);
            }
        }
        
        ArrayList<Integer>res=new ArrayList<>();
        
        while(!st.isEmpty()){
            int x=st.pop();
            res.add(x);
        }
        
        return res;
        
    }
}
