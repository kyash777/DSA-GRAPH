class Solution {
    public static ArrayList<Integer> findOrder(int n, int[][] prerequisites) {
        
        ArrayList<Integer>res=new ArrayList<>();
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<prerequisites.length;i++){
            int v=prerequisites[i][0];
            int u=prerequisites[i][1];
            
            adj.get(u).add(v);
        }
        
        int indegree[]=new int[n];
        
        for(int i=0;i<n;i++){
            for(int j: adj.get(i)){
                indegree[j]++;
            }
        }
        
        Queue<Integer>q=new LinkedList<>();
        
        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        
        while(!q.isEmpty()){
            int node=q.peek();
            q.poll();
            res.add(node);
            for(int neighbor: adj.get(node)){
                indegree[neighbor]--;
                if(indegree[neighbor]==0){
                    q.add(neighbor);
                }
            }
        }
        
        if(res.size()==n){
            return res;
        }
        ArrayList<Integer>empty=new ArrayList<>();
        return empty;
    }
}
