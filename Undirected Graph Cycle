class Pair{
    int node;
    int par;
    Pair(int node,int par){
        this.node=node;
        this.par=par;
    }
}
class Solution {
    
    boolean dfs(int src,int par,ArrayList<ArrayList<Integer>>adj,int vis[]){
        vis[src]=1;
        
        for(int neighbor: adj.get(src)){
            if(vis[neighbor]==0){
                if(dfs(neighbor,src,adj,vis)){
                    return true;
                };
            }else{
                if(neighbor!=par){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    boolean bfs(int src,ArrayList<ArrayList<Integer>>adj,int vis[]){
        
        Queue<Pair>q=new LinkedList<>();
        vis[src]=1;
        q.add(new Pair(src,-1));
        
        while(!q.isEmpty()){
            int node=q.peek().node;
            int par=q.peek().par;
            q.poll();
            
            for(int neighbor: adj.get(node)){
                if(vis[neighbor]==0){
                    q.add(new Pair(neighbor,node));
                    vis[neighbor]=1;
                }else{
                    if(neighbor!=par){
                        return true;
                    }
                }
            }
            
        }
         return false;
    }
    public boolean isCycle(int n, int[][] edges) {
        
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        
        for(int i=0;i<n+1;i++){
            adj.add(new ArrayList<Integer>());
        }
        
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int vis[]=new int[n+1];
        
        for(int i=0;i<n;i++){
            if(vis[i]==0){
                if(dfs(i,-1,adj,vis)){
                    return true;
                }
            }
        }
        
        return false;
    }
}
