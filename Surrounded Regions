Given a matrix mat where every element is either 'O' or 'X'. Replace all 'O' or a group of 'O' with 'X' that are surrounded by 'X'.

A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.

Examples:

Input: mat = 
[['X', 'X', 'X', 'X'], 
['X', 'O', 'X', 'X'], 
['X', 'O', 'O', 'X'], 
['X', 'O', 'X', 'X'], 
['X', 'X', 'O', 'O']]
Output: 
[['X', 'X', 'X', 'X'], 
['X', 'X', 'X', 'X'], 
['X', 'X', 'X', 'X'], 
['X', 'X', 'X', 'X'], 
['X', 'X', 'O', 'O']]
Explanation: We only changed those 'O' that are surrounded by 'X'

// User function Template for Java

class Solution {
    static boolean isValid(int i,int j,int n,int m){
        if(i>=0 && i<n && j>=0 && j<m){
            return true;
        }
        return false;
    }
    static void dfs(int i,int j,char mat[][],int n,int m){
        mat[i][j]='T';
        
        int dx[]={1,0,-1,0};
        int dy[]={0,1,0,-1};
        
        for(int k=0;k<4;k++){
            
            int ni=i+dx[k];
            int nj=j+dy[k];
            
            if(isValid(ni,nj,n,m) && mat[ni][nj]=='O'){
                dfs(ni,nj,mat,n,m);
            }
        }
    }
    static char[][] fill(char mat[][]) {
        
        int n=mat.length;
        int m=mat[0].length;
        
        for(int i=0;i<n;i++){
            if(mat[i][0]=='O'){
                dfs(i,0,mat,n,m);
            }
        }
        for(int i=0;i<n;i++){
            if(mat[i][m-1]=='O'){
                dfs(i,m-1,mat,n,m);
            }
        }
        for(int i=0;i<m;i++){
            if(mat[0][i]=='O'){
                dfs(0,i,mat,n,m);
            }
        }
        for(int i=0;i<m;i++){
            if(mat[n-1][i]=='O'){
                dfs(n-1,i,mat,n,m);
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]=='O'){
                    mat[i][j]='X';
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]=='T'){
                    mat[i][j]='O';
                }
            }
        }
        
        return mat;
        
    }
}
