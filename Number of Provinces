Given an undirected graph with V vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the number of provinces.

Note: A province is a group of directly or indirectly connected cities and no other cities outside of the group.

Example 1:

Input:[[1, 0, 1],[0, 1, 0],[1, 0, 1]]
 
Output:
2
Explanation:
The graph clearly has 2 Provinces [1,3] and [2]. As city 1 and city 3 has a path between them they belong to a single province. City 2 has no path to city 1 or city 3 hence it belongs to another province.

// User function Template for Java

class Solution {
    public static void dfs(int node,ArrayList<ArrayList<Integer>>adj,int vis[]){
        vis[node]=1;
        
        for(int i: adj.get(node)){
            if(vis[i]==0){
                dfs(i,adj,vis);
            }
        }
    }
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int v) {
        
        ArrayList<ArrayList<Integer>>adjLs=new ArrayList<ArrayList<Integer>>();
        
        for(int i=0;i<v+1;i++){
            ArrayList<Integer>list=new ArrayList<>();
            adjLs.add(list);
        }
        
        for(int i=0;i<v;i++){
            for(int j=0;j<v;j++){
                if(adj.get(i).get(j)==1 && i!=j){
                    adjLs.get(i).add(j);
                    adjLs.get(j).add(i);
                }
            }
        }
        
        int vis[]=new int[v+1];
        int res=0;
        
        for(int i=0;i<v;i++){
            if(vis[i]==0){
               res++;
               dfs(i,adjLs,vis);
            }
        }
        
        return res;
        
    }
};
