Rotten Oranges
Difficulty: MediumAccuracy: 46.02%Submissions: 182K+Points: 4Average Time: 20m
Given a matrix mat[][] of dimension n * m where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cell have fresh oranges
2 : Cell have rotten oranges

We have to determine what is the earliest time after which all the oranges are rotten. A rotten orange at index (i, j) can rot other fresh orange at indexes (i-1, j), (i+1, j), (i, j-1), (i, j+1) (up, down, left and right) in a unit time.

Note: Your task is to return the minimum time to rot all the fresh oranges. If not possible returns -1.

Examples:

Input: mat[][] = [[0, 1, 2], [0, 1, 2], [2, 1, 1]]
Output: 1
Explanation: Oranges at positions (0,2), (1,2), (2,0) will rot oranges at (0,1), (1,1), (2,2) and (2,1) in unit time.

class Pair{
    int row;
    int col;
    int tm;
    Pair(int row,int col,int tm){
        this.row=row;
        this.col=col;
        this.tm=tm;
    }
}
class Solution {
    boolean isValid(int i,int j,int n,int m){
        if(i>=0 && i<n && j>=0 && j<m){
            return true;
        }
        return false;
    }
    public int orangesRotting(int[][] mat) {
        
        int n=mat.length;
        int m=mat[0].length;
        int countFresh=0;
        Queue<Pair>q=new LinkedList<>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==2){
                    q.add(new Pair(i,j,0));
                }
                if(mat[i][j]==1){
                    countFresh++;
                }
            }
        }
        
        if(countFresh==0){
            return 0;
        }
        
      
        
        int maxTm=-1;
        int count=0;
        int dx[]={1,0,-1,0};
        int dy[]={0,1,0,-1};
        
        while(!q.isEmpty()){
            
            int row=q.peek().row;
            int col=q.peek().col;
            int tm=q.peek().tm;
            maxTm=Math.max(tm,maxTm);
            
            q.remove();
            
            for(int k=0;k<4;k++){
                int nrow=row+dx[k];
                int ncol=col+dy[k];
                
                if(isValid(nrow,ncol,n,m) && mat[nrow][ncol]==1){
                    count++;
                    mat[nrow][ncol]=2;
                    q.add(new Pair(nrow,ncol,tm+1));
                }
            }
        }
        
        if(count!=countFresh){
            return -1;
        }
        else{
            return maxTm;
        }
        
    }
}
