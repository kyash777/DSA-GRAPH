class Solution {
    boolean dfs(int node,ArrayList<ArrayList<Integer>>adj,int color[]){
        if(color[node]==-1){
            color[node]=1;
        }
        
        for(int neighbor: adj.get(node)){
            if(color[neighbor]==-1){
                color[neighbor]=1-color[node];
                if(!dfs(neighbor,adj,color)){
                    return false;
                };
            }else{
                if(color[neighbor]==color[node]){
                    return false;
                }
            }
        }
        
        return true;
        
        
    }
    public boolean isBipartite(int v, int[][] edges) {
        
        int n=edges.length;
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<Integer>());
        }
        
        for(int i=0;i<n;i++){
            int u=edges[i][0];
            int vv=edges[i][1];
            
            adj.get(u).add(vv);
            adj.get(vv).add(u);
        }
        
        int color[]=new int[v];
        for(int i=0;i<v;i++){
            color[i]=-1;
        }
        for(int i=0;i<v;i++){
            if(color[i]==-1){
                if(dfs(i,adj,color)==false){
                    return false;
                }
            }
        }
        return true;
        
        
        
    }
}
